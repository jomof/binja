// Generated from binja.proto

namespace binja.ParseNode_;

enum Type : int {
  RULE = 0,
  BUILD = 1,
  DEFAULT = 2,
  POOL = 3,
  BINDING = 4,
  INCLUDE = 5,
}

namespace binja.ParseStringPiece_;

enum Type : int {
  RAW = 0,
  SPECIAL = 1,
}

namespace binja;

table CompiledBuildNinja {
  parse_node:[binja.ParseNode];
  rule:[binja.ParseRule];
  build:[binja.ParseBuild];
  default:[binja.ParseDefault];
  pool:[binja.ParsePool];
  binding:[binja.ParseBinding];
  include:[binja.ParseInclude];
}

table ParseNode {
  type:binja.ParseNode_.Type;
  table_offset:ulong;
}

table ParseStringPiece {
  type:binja.ParseStringPiece_.Type;
  value:string;
}

table ParseEvalString {
  piece:[binja.ParseStringPiece];
}

table ParseBinding {
  key:string;
  value:binja.ParseEvalString;
  final_position:ulong;
}

table ParseRule {
  name:string;
  binding:[binja.ParseBinding];
  rule_position:ulong;
  final_position:ulong;
}

table ParseBuild {
  name:string;
  out:[binja.ParseEvalString];
  implicit_out_count:int;
  in:[binja.ParseEvalString];
  implicit_in_count:int;
  order_only_in_count:int;
  validations:[binja.ParseEvalString];
  bindings:[binja.ParseBinding];
  rule_position:ulong;
  final_position:ulong;
}

table ParsePool {
  name:string;
  depth:binja.ParseEvalString;
  pool_position:ulong;
  depth_position:ulong;
  final_position:ulong;
}

table ParseDefault {
  default:[binja.ParseEvalString];
  default_positions:[ulong];
  final_position:ulong;
}

table ParseInclude {
  new_scope:bool;
  path:binja.ParseEvalString;
  final_position:ulong;
}

